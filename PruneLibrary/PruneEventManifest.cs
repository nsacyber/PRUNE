//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------




namespace PruneEvents
{
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Diagnostics.Eventing;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Security.Principal;

    public static class PRUNE_EVENT_PROVIDER
    {
        //
        // Provider Prune-Log Event Count 12
        //

        internal static EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("75aa90da-302b-40fe-8760-80ed0b90d9d6"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        private static EventDescriptor PROCESS_REPORT_EVENT;
        private static EventDescriptor HOST_NAME_ERROR_EVENT;
        private static EventDescriptor FINISHED_EVENT;
        private static EventDescriptor CANNOT_GATHER_EVENT;
        private static EventDescriptor EXIT_EVENT_ERROR_EVENT;
        private static EventDescriptor SERVICE_STARTING_EVENT;
        private static EventDescriptor SERVICE_EXITING_EVENT;
        private static EventDescriptor DISALLOWED_PROCESS_EVENT;
        private static EventDescriptor CREATING_INSTANCE_EVENT;
        private static EventDescriptor NO_WHITELIST_EVENT;
        private static EventDescriptor LIBRARY_ERROR_EVENT;
        private static EventDescriptor SERVICE_ERROR_EVENT;


        static PRUNE_EVENT_PROVIDER()
        {
            unchecked
            {
                PROCESS_REPORT_EVENT = new EventDescriptor(0x1, 0x0, 0x14, 0x4, 0x14, 0xd, (long)0x8000000000000000);
                HOST_NAME_ERROR_EVENT = new EventDescriptor(0x2, 0x0, 0x14, 0x4, 0x15, 0xa, (long)0x8000000000000000);
                FINISHED_EVENT = new EventDescriptor(0x3, 0x0, 0x14, 0x4, 0x16, 0xa, (long)0x8000000000000000);
                CANNOT_GATHER_EVENT = new EventDescriptor(0x4, 0x0, 0x14, 0x4, 0x17, 0xa, (long)0x8000000000000000);
                EXIT_EVENT_ERROR_EVENT = new EventDescriptor(0x5, 0x0, 0x14, 0x3, 0x18, 0xa, (long)0x8000000000000000);
                SERVICE_STARTING_EVENT = new EventDescriptor(0x6, 0x0, 0x14, 0x4, 0x19, 0xb, (long)0x8000000000000000);
                SERVICE_EXITING_EVENT = new EventDescriptor(0x7, 0x0, 0x14, 0x4, 0x1a, 0xb, (long)0x8000000000000000);
                DISALLOWED_PROCESS_EVENT = new EventDescriptor(0x8, 0x0, 0x14, 0x4, 0x1b, 0xb, (long)0x8000000000000000);
                CREATING_INSTANCE_EVENT = new EventDescriptor(0x9, 0x0, 0x14, 0x4, 0x1c, 0xb, (long)0x8000000000000000);
                NO_WHITELIST_EVENT = new EventDescriptor(0xa, 0x0, 0x14, 0x4, 0x1d, 0xb, (long)0x8000000000000000);
                LIBRARY_ERROR_EVENT = new EventDescriptor(0x14, 0x0, 0x14, 0x2, 0x1e, 0xa, (long)0x8000000000000000);
                SERVICE_ERROR_EVENT = new EventDescriptor(0x15, 0x0, 0x14, 0x2, 0x1e, 0xb, (long)0x8000000000000000);
            }
        }


        //
        // Event method for PROCESS_REPORT_EVENT
        //
        public static bool EventWritePROCESS_REPORT_EVENT(string Process, uint Samples, string Processors, string Disks, string ComputerManufacturer, string ComputerModel, string ComputerProcessorNum, string RamSize, double ProcessorTimePercentMinimum, double ProcessorTimePercentMaximum, double ProcessorTimePercentAverage, long WorkingSetMinimum, long WorkingSetMaximum, long WorkingSetAverage, long PrivateBytesMinimum, long PrivateBytesMaximum, long PrivateBytesAverage, long DiskBytesReadTotal, long DiskBytesReadMinimum, long DiskBytesReadMaximum, long DiskBytesReadAverage, long DiskBytesWrittenTotal, long DiskBytesWrittenMinimum, long DiskBytesWrittenMaximum, long DiskBytesWrittenAverage, long DiskReadOperationTotal, long DiskReadOperationMinimum, long DiskReadOperationMaximum, long DiskReadOperationAverage, long DiskWriteOperationTotal, long DiskWriteOperationMinimum, long DiskWriteOperationMaximum, long DiskWriteOperationAverage, long TcpBytesReceivedTotal, long TcpBytesReceivedMinimum, long TcpBytesReceivedMaximum, long TcpBytesReceivedAverage, long TcpBytesSentTotal, long TcpBytesSentMinimum, long TcpBytesSentMaximum, long TcpBytesSentAverage, long UdpBytesReceivedTotal, long UdpBytesReceivedMinimum, long UdpBytesReceivedMaximum, long UdpBytesReceivedAverage, long UdpBytesSentTotal, long UdpBytesSentMinimum, long UdpBytesSentMaximum, long UdpBytesSentAverage, string TcpConnections)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.Templatet1(ref PROCESS_REPORT_EVENT, Process, Samples, Processors, Disks, ComputerManufacturer, ComputerModel, ComputerProcessorNum, RamSize, ProcessorTimePercentMinimum, ProcessorTimePercentMaximum, ProcessorTimePercentAverage, WorkingSetMinimum, WorkingSetMaximum, WorkingSetAverage, PrivateBytesMinimum, PrivateBytesMaximum, PrivateBytesAverage, DiskBytesReadTotal, DiskBytesReadMinimum, DiskBytesReadMaximum, DiskBytesReadAverage, DiskBytesWrittenTotal, DiskBytesWrittenMinimum, DiskBytesWrittenMaximum, DiskBytesWrittenAverage, DiskReadOperationTotal, DiskReadOperationMinimum, DiskReadOperationMaximum, DiskReadOperationAverage, DiskWriteOperationTotal, DiskWriteOperationMinimum, DiskWriteOperationMaximum, DiskWriteOperationAverage, TcpBytesReceivedTotal, TcpBytesReceivedMinimum, TcpBytesReceivedMaximum, TcpBytesReceivedAverage, TcpBytesSentTotal, TcpBytesSentMinimum, TcpBytesSentMaximum, TcpBytesSentAverage, UdpBytesReceivedTotal, UdpBytesReceivedMinimum, UdpBytesReceivedMaximum, UdpBytesReceivedAverage, UdpBytesSentTotal, UdpBytesSentMinimum, UdpBytesSentMaximum, UdpBytesSentAverage, TcpConnections);
        }

        //
        // Event method for HOST_NAME_ERROR_EVENT
        //
        public static bool EventWriteHOST_NAME_ERROR_EVENT(string IpAddress)
        {

            return m_provider.WriteEvent(ref HOST_NAME_ERROR_EVENT, IpAddress);

        }

        //
        // Event method for FINISHED_EVENT
        //
        public static bool EventWriteFINISHED_EVENT(string Process)
        {

            return m_provider.WriteEvent(ref FINISHED_EVENT, Process);

        }

        //
        // Event method for CANNOT_GATHER_EVENT
        //
        public static bool EventWriteCANNOT_GATHER_EVENT(string Process)
        {

            return m_provider.WriteEvent(ref CANNOT_GATHER_EVENT, Process);

        }

        //
        // Event method for EXIT_EVENT_ERROR_EVENT
        //
        public static bool EventWriteEXIT_EVENT_ERROR_EVENT(string Process)
        {

            return m_provider.WriteEvent(ref EXIT_EVENT_ERROR_EVENT, Process);

        }

        //
        // Event method for SERVICE_STARTING_EVENT
        //
        public static bool EventWriteSERVICE_STARTING_EVENT(){

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateEventDescriptor(ref SERVICE_STARTING_EVENT);
        }

        //
        // Event method for SERVICE_EXITING_EVENT
        //
        public static bool EventWriteSERVICE_EXITING_EVENT(){

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateEventDescriptor(ref SERVICE_EXITING_EVENT);
        }

        //
        // Event method for DISALLOWED_PROCESS_EVENT
        //
        public static bool EventWriteDISALLOWED_PROCESS_EVENT(){

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateEventDescriptor(ref DISALLOWED_PROCESS_EVENT);
        }

        //
        // Event method for CREATING_INSTANCE_EVENT
        //
        public static bool EventWriteCREATING_INSTANCE_EVENT(string Process)
        {

            return m_provider.WriteEvent(ref CREATING_INSTANCE_EVENT, Process);

        }

        //
        // Event method for NO_WHITELIST_EVENT
        //
        public static bool EventWriteNO_WHITELIST_EVENT(){

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateEventDescriptor(ref NO_WHITELIST_EVENT);
        }

        //
        // Event method for LIBRARY_ERROR_EVENT
        //
        public static bool EventWriteLIBRARY_ERROR_EVENT(string ErrorMessage)
        {

            return m_provider.WriteEvent(ref LIBRARY_ERROR_EVENT, ErrorMessage);

        }

        //
        // Event method for SERVICE_ERROR_EVENT
        //
        public static bool EventWriteSERVICE_ERROR_EVENT(string ErrorMessage)
        {

            return m_provider.WriteEvent(ref SERVICE_ERROR_EVENT, ErrorMessage);

        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}


        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }



        internal unsafe bool Templatet1(
            ref EventDescriptor eventDescriptor,
            string Process,
            uint Samples,
            string Processors,
            string Disks,
            string ComputerManufacturer,
            string ComputerModel,
            string ComputerProcessorNum,
            string RamSize,
            double ProcessorTimePercentMinimum,
            double ProcessorTimePercentMaximum,
            double ProcessorTimePercentAverage,
            long WorkingSetMinimum,
            long WorkingSetMaximum,
            long WorkingSetAverage,
            long PrivateBytesMinimum,
            long PrivateBytesMaximum,
            long PrivateBytesAverage,
            long DiskBytesReadTotal,
            long DiskBytesReadMinimum,
            long DiskBytesReadMaximum,
            long DiskBytesReadAverage,
            long DiskBytesWrittenTotal,
            long DiskBytesWrittenMinimum,
            long DiskBytesWrittenMaximum,
            long DiskBytesWrittenAverage,
            long DiskReadOperationTotal,
            long DiskReadOperationMinimum,
            long DiskReadOperationMaximum,
            long DiskReadOperationAverage,
            long DiskWriteOperationTotal,
            long DiskWriteOperationMinimum,
            long DiskWriteOperationMaximum,
            long DiskWriteOperationAverage,
            long TcpBytesReceivedTotal,
            long TcpBytesReceivedMinimum,
            long TcpBytesReceivedMaximum,
            long TcpBytesReceivedAverage,
            long TcpBytesSentTotal,
            long TcpBytesSentMinimum,
            long TcpBytesSentMaximum,
            long TcpBytesSentAverage,
            long UdpBytesReceivedTotal,
            long UdpBytesReceivedMinimum,
            long UdpBytesReceivedMaximum,
            long UdpBytesReceivedAverage,
            long UdpBytesSentTotal,
            long UdpBytesSentMinimum,
            long UdpBytesSentMaximum,
            long UdpBytesSentAverage,
            string TcpConnections
            )
        {
            int argumentCount = 50;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Process.Length + 1)*sizeof(char);

                userDataPtr[1].DataPointer = (UInt64)(&Samples);
                userDataPtr[1].Size = (uint)(sizeof(int)  );

                userDataPtr[2].Size = (uint)(Processors.Length + 1)*sizeof(char);

                userDataPtr[3].Size = (uint)(Disks.Length + 1)*sizeof(char);

                userDataPtr[4].Size = (uint)(ComputerManufacturer.Length + 1)*sizeof(char);

                userDataPtr[5].Size = (uint)(ComputerModel.Length + 1)*sizeof(char);

                userDataPtr[6].Size = (uint)(ComputerProcessorNum.Length + 1)*sizeof(char);

                userDataPtr[7].Size = (uint)(RamSize.Length + 1)*sizeof(char);

                userDataPtr[8].DataPointer = (UInt64)(&ProcessorTimePercentMinimum);
                userDataPtr[8].Size = (uint)(sizeof(double)  );

                userDataPtr[9].DataPointer = (UInt64)(&ProcessorTimePercentMaximum);
                userDataPtr[9].Size = (uint)(sizeof(double)  );

                userDataPtr[10].DataPointer = (UInt64)(&ProcessorTimePercentAverage);
                userDataPtr[10].Size = (uint)(sizeof(double)  );

                userDataPtr[11].DataPointer = (UInt64)(&WorkingSetMinimum);
                userDataPtr[11].Size = (uint)(sizeof(long)  );

                userDataPtr[12].DataPointer = (UInt64)(&WorkingSetMaximum);
                userDataPtr[12].Size = (uint)(sizeof(long)  );

                userDataPtr[13].DataPointer = (UInt64)(&WorkingSetAverage);
                userDataPtr[13].Size = (uint)(sizeof(long)  );

                userDataPtr[14].DataPointer = (UInt64)(&PrivateBytesMinimum);
                userDataPtr[14].Size = (uint)(sizeof(long)  );

                userDataPtr[15].DataPointer = (UInt64)(&PrivateBytesMaximum);
                userDataPtr[15].Size = (uint)(sizeof(long)  );

                userDataPtr[16].DataPointer = (UInt64)(&PrivateBytesAverage);
                userDataPtr[16].Size = (uint)(sizeof(long)  );

                userDataPtr[17].DataPointer = (UInt64)(&DiskBytesReadTotal);
                userDataPtr[17].Size = (uint)(sizeof(long)  );

                userDataPtr[18].DataPointer = (UInt64)(&DiskBytesReadMinimum);
                userDataPtr[18].Size = (uint)(sizeof(long)  );

                userDataPtr[19].DataPointer = (UInt64)(&DiskBytesReadMaximum);
                userDataPtr[19].Size = (uint)(sizeof(long)  );

                userDataPtr[20].DataPointer = (UInt64)(&DiskBytesReadAverage);
                userDataPtr[20].Size = (uint)(sizeof(long)  );

                userDataPtr[21].DataPointer = (UInt64)(&DiskBytesWrittenTotal);
                userDataPtr[21].Size = (uint)(sizeof(long)  );

                userDataPtr[22].DataPointer = (UInt64)(&DiskBytesWrittenMinimum);
                userDataPtr[22].Size = (uint)(sizeof(long)  );

                userDataPtr[23].DataPointer = (UInt64)(&DiskBytesWrittenMaximum);
                userDataPtr[23].Size = (uint)(sizeof(long)  );

                userDataPtr[24].DataPointer = (UInt64)(&DiskBytesWrittenAverage);
                userDataPtr[24].Size = (uint)(sizeof(long)  );

                userDataPtr[25].DataPointer = (UInt64)(&DiskReadOperationTotal);
                userDataPtr[25].Size = (uint)(sizeof(long)  );

                userDataPtr[26].DataPointer = (UInt64)(&DiskReadOperationMinimum);
                userDataPtr[26].Size = (uint)(sizeof(long)  );

                userDataPtr[27].DataPointer = (UInt64)(&DiskReadOperationMaximum);
                userDataPtr[27].Size = (uint)(sizeof(long)  );

                userDataPtr[28].DataPointer = (UInt64)(&DiskReadOperationAverage);
                userDataPtr[28].Size = (uint)(sizeof(long)  );

                userDataPtr[29].DataPointer = (UInt64)(&DiskWriteOperationTotal);
                userDataPtr[29].Size = (uint)(sizeof(long)  );

                userDataPtr[30].DataPointer = (UInt64)(&DiskWriteOperationMinimum);
                userDataPtr[30].Size = (uint)(sizeof(long)  );

                userDataPtr[31].DataPointer = (UInt64)(&DiskWriteOperationMaximum);
                userDataPtr[31].Size = (uint)(sizeof(long)  );

                userDataPtr[32].DataPointer = (UInt64)(&DiskWriteOperationAverage);
                userDataPtr[32].Size = (uint)(sizeof(long)  );

                userDataPtr[33].DataPointer = (UInt64)(&TcpBytesReceivedTotal);
                userDataPtr[33].Size = (uint)(sizeof(long)  );

                userDataPtr[34].DataPointer = (UInt64)(&TcpBytesReceivedMinimum);
                userDataPtr[34].Size = (uint)(sizeof(long)  );

                userDataPtr[35].DataPointer = (UInt64)(&TcpBytesReceivedMaximum);
                userDataPtr[35].Size = (uint)(sizeof(long)  );

                userDataPtr[36].DataPointer = (UInt64)(&TcpBytesReceivedAverage);
                userDataPtr[36].Size = (uint)(sizeof(long)  );

                userDataPtr[37].DataPointer = (UInt64)(&TcpBytesSentTotal);
                userDataPtr[37].Size = (uint)(sizeof(long)  );

                userDataPtr[38].DataPointer = (UInt64)(&TcpBytesSentMinimum);
                userDataPtr[38].Size = (uint)(sizeof(long)  );

                userDataPtr[39].DataPointer = (UInt64)(&TcpBytesSentMaximum);
                userDataPtr[39].Size = (uint)(sizeof(long)  );

                userDataPtr[40].DataPointer = (UInt64)(&TcpBytesSentAverage);
                userDataPtr[40].Size = (uint)(sizeof(long)  );

                userDataPtr[41].DataPointer = (UInt64)(&UdpBytesReceivedTotal);
                userDataPtr[41].Size = (uint)(sizeof(long)  );

                userDataPtr[42].DataPointer = (UInt64)(&UdpBytesReceivedMinimum);
                userDataPtr[42].Size = (uint)(sizeof(long)  );

                userDataPtr[43].DataPointer = (UInt64)(&UdpBytesReceivedMaximum);
                userDataPtr[43].Size = (uint)(sizeof(long)  );

                userDataPtr[44].DataPointer = (UInt64)(&UdpBytesReceivedAverage);
                userDataPtr[44].Size = (uint)(sizeof(long)  );

                userDataPtr[45].DataPointer = (UInt64)(&UdpBytesSentTotal);
                userDataPtr[45].Size = (uint)(sizeof(long)  );

                userDataPtr[46].DataPointer = (UInt64)(&UdpBytesSentMinimum);
                userDataPtr[46].Size = (uint)(sizeof(long)  );

                userDataPtr[47].DataPointer = (UInt64)(&UdpBytesSentMaximum);
                userDataPtr[47].Size = (uint)(sizeof(long)  );

                userDataPtr[48].DataPointer = (UInt64)(&UdpBytesSentAverage);
                userDataPtr[48].Size = (uint)(sizeof(long)  );

                userDataPtr[49].Size = (uint)(TcpConnections.Length + 1)*sizeof(char);

                fixed (char* a0 = Process, a1 = Processors, a2 = Disks, a3 = ComputerManufacturer, a4 = ComputerModel, a5 = ComputerProcessorNum, a6 = RamSize, a7 = TcpConnections)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[2].DataPointer = (ulong)a1;
                    userDataPtr[3].DataPointer = (ulong)a2;
                    userDataPtr[4].DataPointer = (ulong)a3;
                    userDataPtr[5].DataPointer = (ulong)a4;
                    userDataPtr[6].DataPointer = (ulong)a5;
                    userDataPtr[7].DataPointer = (ulong)a6;
                    userDataPtr[49].DataPointer = (ulong)a7;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal bool TemplateEventDescriptor(
            ref EventDescriptor eventDescriptor
            )
        {
            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords)){
                return WriteEvent(ref eventDescriptor, 0, IntPtr.Zero);
            }

            return true;
        }

    }

}
